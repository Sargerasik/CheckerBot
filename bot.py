import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from checker import WebsiteChecker

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

logger = logging.getLogger(__name__)

user_state = {}

def label_for(data: str) -> str:
    return {
        'terms': "Terms & Policies",
        'email': "Email",
        'currency': "–í–∞–ª—é—Ç–∞",
        '404': "404 Errors",
        'cookie': "Cookie Consent",
        'lang': "–Ø–∑—ã–∫ —Å–∞–π—Ç–∞",
        'all': "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
    }.get(data, data)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state.pop(user_id, None)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    url = update.message.text.strip()
    user_state[user_id] = {'url': url}
    await send_options(update.message, url)

async def send_options(message_or_query, url, force_new=False):
    keyboard = [
        [InlineKeyboardButton("‚úÖ Terms & Policies", callback_data='terms')],
        [InlineKeyboardButton("üìß Email", callback_data='email')],
        [InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data='phone')],
        [InlineKeyboardButton("üí∂ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞", callback_data='currency')],
        [InlineKeyboardButton("üîó 404 Errors", callback_data='404')],
        [InlineKeyboardButton("üç™ Cookie Consent", callback_data='cookie')],
        [InlineKeyboardButton("üåê –Ø–∑—ã–∫ —Å–∞–π—Ç–∞", callback_data='lang')],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—ë", callback_data='all')],
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Å–∞–π—Ç", callback_data='new_site')],
    ]
    markup = InlineKeyboardMarkup(keyboard)
    text = f"üîó –°–∞–π—Ç: {url}\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:"

    if isinstance(message_or_query, CallbackQuery):
        if force_new:
            await message_or_query.message.reply_text(text, reply_markup=markup)
        else:
            await message_or_query.edit_message_text(text, reply_markup=markup)
    elif isinstance(message_or_query, Message):
        await message_or_query.reply_text(text, reply_markup=markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data = user_state.get(user_id)

    if query.data == 'new_site':
        user_state.pop(user_id, None)
        await query.edit_message_text("–û–∫! üÜï –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.")
        return

    if not user_data:
        await query.edit_message_text("–ù–∞—á–Ω–∏ —Å /start –∏ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É.")
        return

    url = user_data['url']

    # ‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞
    try:
        await query.edit_message_text(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É ¬´{label_for(query.data)}¬ª –¥–ª—è: {url}")
    except Exception:
        pass  # –ò–Ω–æ–≥–¥–∞ Telegram –Ω–µ –¥–∞—ë—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    result_text = await run_checker(query.data, url)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.message.reply_text(result_text)

    # üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await send_options(query, url, force_new=True)

async def run_checker(mode: str, url: str) -> str:
    checker = WebsiteChecker(url)

    try:
        if mode == 'terms':
            result = checker.check_terms_and_policies()
            details = "\n".join([f"{k}: {'‚úÖ' if v else '‚ùå'}" for k, v in result.items()])
            return f"üîç Terms & Policies:\n{details}"

        elif mode == 'email':
            result = checker.check_contact_email()
            if result['found']:
                emails = "\n".join(result['emails'])
                location = "–Ω–∞ –≥–ª–∞–≤–Ω–æ–π" if result['source'] == "main" else "–≤ Privacy Policy"
                return f"üìß –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã ({location}):\n{emails}"
            else:
                return "üìß Email –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π, –Ω–∏ –≤ Privacy Policy."


        elif mode == 'currency':
            result = await checker.check_currency()
            if not result["found"] or not result["symbols"]:
                return "üí± –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ."
            symbols = ", ".join([f"{sym} ({cnt})" for sym, cnt in result["symbols"].items()])
            most_common_symbol = result.get("most_common_symbol", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω")
            return (
                f"üí± –ù–∞–π–¥–µ–Ω—ã –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã/–∫–æ–¥—ã:\n{symbols}\n\n"
                f"üèÜ –°–∞–º—ã–π —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π: {most_common_symbol}"
            )

        elif mode == 'cookie':
            consent = checker.check_cookie_consent()
            return f"üç™ Cookie Consent Banner: {'‚úÖ –ù–∞–π–¥–µ–Ω' if consent else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}"

        elif mode == 'phone':
            result = checker.check_contact_phone()
            if result['found']:
                phones = "\n".join(result['phones'])
                location = "–Ω–∞ –≥–ª–∞–≤–Ω–æ–π" if result['source'] == "main" else "–≤ Privacy Policy"
                return f"üì± –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã ({location}):\n{phones}"
            else:
                return "üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π, –Ω–∏ –≤ Privacy Policy."

        elif mode == '404':
            broken = await checker.check_404_errors()
            if broken:
                lines = "\n".join([f"{link} ({code})" for link, code in broken])
                return f"üö´ –ù–∞–π–¥–µ–Ω—ã –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏:\n{lines}"
            else:
                return "‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!"
        elif mode == 'lang':
            res = checker.check_language_consistency()
            if res["language"] == "error":
                result_text = "üåê –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞."
            elif res["language"] == "unknown":
                result_text = "üåê –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Å–∞–π—Ç–∞."
            else:
                lang = res['language'].upper()
                status = "‚úÖ –û–¥–Ω–æ—Ä–æ–¥–Ω–æ" if res["consistent"] else "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏"
                result_text = f"üåê –Ø–∑—ã–∫ —Å–∞–π—Ç–∞: {lang}\n{status}"
            return result_text
        elif mode == 'all':
            t = checker.check_terms_and_policies()
            e = checker.check_contact_email()
            c = await checker.check_currency()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            b = await checker.check_404_errors()
            cookie = checker.check_cookie_consent()
            l = checker.check_language_consistency()
            p = checker.check_contact_phone()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞
            lang_part = ""
            if l["language"] == "error":
                lang_part = "üåê –Ø–∑—ã–∫: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏"
            elif l["language"] == "unknown":
                lang_part = "üåê –Ø–∑—ã–∫: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
            else:
                lang_code = l["language"].upper()
                status = "‚úÖ –û–¥–Ω–æ—Ä–æ–¥–Ω–æ" if l["consistent"] else "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏"
                lang_part = f"üåê –Ø–∑—ã–∫ —Å–∞–π—Ç–∞: {lang_code}\n{status}"
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç
            if c["found"] and c["symbols"]:
                currency_part = (
                    f"üí± –í–∞–ª—é—Ç–∞:\n"
                    f"{', '.join([f'{sym} ({cnt})' for sym, cnt in c['symbols'].items()])}\n"
                    f"üèÜ –°–∞–º—ã–π —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π: {c.get('most_common_symbol', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}"
                )
            else:
                currency_part = "üí± –í–∞–ª—é—Ç–∞: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            parts = [
                "üîç Terms & Policies:\n" + "\n".join([f"{k}: {'‚úÖ' if v else '‚ùå'}" for k, v in t.items()]),
                f"üìß Email: {'‚úÖ ' + ', '.join(e['emails']) if e['found'] else '‚ùå Not found'}",
                currency_part,
                f"üç™ Cookie Consent Banner: {'‚úÖ –ù–∞–π–¥–µ–Ω' if cookie else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}",
                f"üö´ –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏:\n" + "\n".join(
                    [f"{link} ({code})" for link, code in b]) if b else "‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!",
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã: {'‚úÖ ' + ', '.join(p['phones']) if p['found'] else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã'}",
                lang_part
            ]
            return "\n\n".join(parts)
    finally:
        checker.close()
def main():
    app = ApplicationBuilder().token("7615217437:AAEpv1d7xQ2CT-IpUBvV70TRxfdHTRikEvE").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
